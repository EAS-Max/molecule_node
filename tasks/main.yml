---
# tasks file for molecule_node
- name: refresh subscription manager
  command: subscription-manager refresh

- name: clean yum
  command: yum clean all

- name: curl node and run bash script
  shell: curl -sL {{ node_location }} | sudo -E bash -

# - name: curl node
#   command: sudo -E bash -

- name: install nodejs
  yum:
    name: nodejs
    state: present
    update_cache: yes

- name: "Make directory"
  become_user: root
  ansible.builtin.file:
    path: /opt/trainee-challenge-node-app
    state: directory

- name: pull down app get_url
  get_url:
    url: "{{ app_location }}"
    dest: /opt/trainee-challenge-node-app/

- name: pull down app untar
  ansible.builtin.unarchive:
    src: /opt/trainee-challenge-node-app/trainee-challenge-node-app-main.tar.gz
    dest: /tmp/
    remote_src: yes

- name: do not permit traffic in default zone on port 8081/tcp
  ansible.posix.firewalld:
    port: 80/tcp
    permanent: yes
    state: enabled

# - name: untar file
#   command: cd /home/user/

# - name: untar file
#   command: tar -xf trainee-challenge-node-app-main.tar.gz

# - name: install dependency
#   command: npm i /home/user/trainee-challenge-node-app-main /opt/trainee-challenge-node-app

- name: make it executable
  file: dest=/tmp/trainee-challenge-node-app-main/index.js mode=a+x

- name: Install packages
  npm:
    path: /tmp/trainee-challenge-node-app-main

- name: make app a service
  become_user: root
  blockinfile:
    dest: /etc/systemd/system/app.service
    block: |
      [Unit]
      Description= Service
      After=network.target

      [Service]
      Type=simple
      User=root
      WorkingDirectory=/home/user/trainee-challenge-node-app-main
      ExecStart= /usr/bin/node /tmp/trainee-challenge-node-app-main
      Environment=TARGET_URL={{ node_target }}
      Environment=PORT=80
      WorkingDirectory=/tmp/trainee-challenge-node-app-main
      Restart=on-abort

      [Install]
      WantedBy=multi-user.target
    create: yes
#{{ hostvars['max-node'].ansible_all_ipv4_addresses[1] }}
- name: daemon-reload
  command: systemctl daemon-reload

- name: reset firewall
  systemd:
    name: firewalld
    state: reloaded
# - name: enable my app on start up
#   command: systemctl enable app

# - name: start my app on start up
#   command: systemctl start app

- name: enable app
  ansible.builtin.service:
    name: app
    enabled: yes

- name: restart and enable app
  ansible.builtin.service:
    name: app
    state: restarted
